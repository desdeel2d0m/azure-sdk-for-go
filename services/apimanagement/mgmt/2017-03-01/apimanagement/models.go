package apimanagement

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/autorest/to"
	"net/http"
)

// APIType enumerates the values for api type.
type APIType string

const (
	// HTTP specifies the http state for api type.
	HTTP APIType = "http"
	// Soap specifies the soap state for api type.
	Soap APIType = "soap"
)

// AsyncOperationStatus enumerates the values for async operation status.
type AsyncOperationStatus string

const (
	// Failed specifies the failed state for async operation status.
	Failed AsyncOperationStatus = "Failed"
	// InProgress specifies the in progress state for async operation status.
	InProgress AsyncOperationStatus = "InProgress"
	// Started specifies the started state for async operation status.
	Started AsyncOperationStatus = "Started"
	// Succeeded specifies the succeeded state for async operation status.
	Succeeded AsyncOperationStatus = "Succeeded"
)

// AuthorizationMethod enumerates the values for authorization method.
type AuthorizationMethod string

const (
	// DELETE specifies the delete state for authorization method.
	DELETE AuthorizationMethod = "DELETE"
	// GET specifies the get state for authorization method.
	GET AuthorizationMethod = "GET"
	// HEAD specifies the head state for authorization method.
	HEAD AuthorizationMethod = "HEAD"
	// OPTIONS specifies the options state for authorization method.
	OPTIONS AuthorizationMethod = "OPTIONS"
	// PATCH specifies the patch state for authorization method.
	PATCH AuthorizationMethod = "PATCH"
	// POST specifies the post state for authorization method.
	POST AuthorizationMethod = "POST"
	// PUT specifies the put state for authorization method.
	PUT AuthorizationMethod = "PUT"
	// TRACE specifies the trace state for authorization method.
	TRACE AuthorizationMethod = "TRACE"
)

// BackendProtocol enumerates the values for backend protocol.
type BackendProtocol string

const (
	// BackendProtocolHTTP specifies the backend protocol http state for backend protocol.
	BackendProtocolHTTP BackendProtocol = "http"
	// BackendProtocolSoap specifies the backend protocol soap state for backend protocol.
	BackendProtocolSoap BackendProtocol = "soap"
)

// BearerTokenSendingMethod enumerates the values for bearer token sending method.
type BearerTokenSendingMethod string

const (
	// AuthorizationHeader specifies the authorization header state for bearer token sending method.
	AuthorizationHeader BearerTokenSendingMethod = "authorizationHeader"
	// Query specifies the query state for bearer token sending method.
	Query BearerTokenSendingMethod = "query"
)

// ClientAuthenticationMethod enumerates the values for client authentication method.
type ClientAuthenticationMethod string

const (
	// Basic specifies the basic state for client authentication method.
	Basic ClientAuthenticationMethod = "Basic"
	// Body specifies the body state for client authentication method.
	Body ClientAuthenticationMethod = "Body"
)

// ConnectivityStatusType enumerates the values for connectivity status type.
type ConnectivityStatusType string

const (
	// Failure specifies the failure state for connectivity status type.
	Failure ConnectivityStatusType = "failure"
	// Initializing specifies the initializing state for connectivity status type.
	Initializing ConnectivityStatusType = "initializing"
	// Success specifies the success state for connectivity status type.
	Success ConnectivityStatusType = "success"
)

// ContentFormat enumerates the values for content format.
type ContentFormat string

const (
	// SwaggerJSON specifies the swagger json state for content format.
	SwaggerJSON ContentFormat = "swagger-json"
	// SwaggerLinkJSON specifies the swagger link json state for content format.
	SwaggerLinkJSON ContentFormat = "swagger-link-json"
	// WadlLinkJSON specifies the wadl link json state for content format.
	WadlLinkJSON ContentFormat = "wadl-link-json"
	// WadlXML specifies the wadl xml state for content format.
	WadlXML ContentFormat = "wadl-xml"
	// Wsdl specifies the wsdl state for content format.
	Wsdl ContentFormat = "wsdl"
	// WsdlLink specifies the wsdl link state for content format.
	WsdlLink ContentFormat = "wsdl-link"
)

// GrantType enumerates the values for grant type.
type GrantType string

const (
	// AuthorizationCode specifies the authorization code state for grant type.
	AuthorizationCode GrantType = "authorizationCode"
	// ClientCredentials specifies the client credentials state for grant type.
	ClientCredentials GrantType = "clientCredentials"
	// Implicit specifies the implicit state for grant type.
	Implicit GrantType = "implicit"
	// ResourceOwnerPassword specifies the resource owner password state for grant type.
	ResourceOwnerPassword GrantType = "resourceOwnerPassword"
)

// GroupType enumerates the values for group type.
type GroupType string

const (
	// Custom specifies the custom state for group type.
	Custom GroupType = "custom"
	// External specifies the external state for group type.
	External GroupType = "external"
	// System specifies the system state for group type.
	System GroupType = "system"
)

// HostnameType enumerates the values for hostname type.
type HostnameType string

const (
	// Management specifies the management state for hostname type.
	Management HostnameType = "Management"
	// Portal specifies the portal state for hostname type.
	Portal HostnameType = "Portal"
	// Proxy specifies the proxy state for hostname type.
	Proxy HostnameType = "Proxy"
	// Scm specifies the scm state for hostname type.
	Scm HostnameType = "Scm"
)

// IdentityProviderType enumerates the values for identity provider type.
type IdentityProviderType string

const (
	// Aad specifies the aad state for identity provider type.
	Aad IdentityProviderType = "aad"
	// AadB2C specifies the aad b2c state for identity provider type.
	AadB2C IdentityProviderType = "aadB2C"
	// Facebook specifies the facebook state for identity provider type.
	Facebook IdentityProviderType = "facebook"
	// Google specifies the google state for identity provider type.
	Google IdentityProviderType = "google"
	// Microsoft specifies the microsoft state for identity provider type.
	Microsoft IdentityProviderType = "microsoft"
	// Twitter specifies the twitter state for identity provider type.
	Twitter IdentityProviderType = "twitter"
)

// KeyType enumerates the values for key type.
type KeyType string

const (
	// Primary specifies the primary state for key type.
	Primary KeyType = "primary"
	// Secondary specifies the secondary state for key type.
	Secondary KeyType = "secondary"
)

// LoggerType enumerates the values for logger type.
type LoggerType string

const (
	// AzureEventHub specifies the azure event hub state for logger type.
	AzureEventHub LoggerType = "azureEventHub"
)

// NameAvailabilityReason enumerates the values for name availability reason.
type NameAvailabilityReason string

const (
	// AlreadyExists specifies the already exists state for name availability reason.
	AlreadyExists NameAvailabilityReason = "AlreadyExists"
	// Invalid specifies the invalid state for name availability reason.
	Invalid NameAvailabilityReason = "Invalid"
	// Valid specifies the valid state for name availability reason.
	Valid NameAvailabilityReason = "Valid"
)

// PolicyScopeContract enumerates the values for policy scope contract.
type PolicyScopeContract string

const (
	// PolicyScopeContractAll specifies the policy scope contract all state for policy scope contract.
	PolicyScopeContractAll PolicyScopeContract = "All"
	// PolicyScopeContractAPI specifies the policy scope contract api state for policy scope contract.
	PolicyScopeContractAPI PolicyScopeContract = "Api"
	// PolicyScopeContractOperation specifies the policy scope contract operation state for policy scope contract.
	PolicyScopeContractOperation PolicyScopeContract = "Operation"
	// PolicyScopeContractProduct specifies the policy scope contract product state for policy scope contract.
	PolicyScopeContractProduct PolicyScopeContract = "Product"
	// PolicyScopeContractTenant specifies the policy scope contract tenant state for policy scope contract.
	PolicyScopeContractTenant PolicyScopeContract = "Tenant"
)

// ProductState enumerates the values for product state.
type ProductState string

const (
	// NotPublished specifies the not published state for product state.
	NotPublished ProductState = "notPublished"
	// Published specifies the published state for product state.
	Published ProductState = "published"
)

// Protocol enumerates the values for protocol.
type Protocol string

const (
	// ProtocolHTTP specifies the protocol http state for protocol.
	ProtocolHTTP Protocol = "http"
	// ProtocolHTTPS specifies the protocol https state for protocol.
	ProtocolHTTPS Protocol = "https"
)

// SkuType enumerates the values for sku type.
type SkuType string

const (
	// Developer specifies the developer state for sku type.
	Developer SkuType = "Developer"
	// Premium specifies the premium state for sku type.
	Premium SkuType = "Premium"
	// Standard specifies the standard state for sku type.
	Standard SkuType = "Standard"
)

// StoreName enumerates the values for store name.
type StoreName string

const (
	// CertificateAuthority specifies the certificate authority state for store name.
	CertificateAuthority StoreName = "CertificateAuthority"
	// Root specifies the root state for store name.
	Root StoreName = "Root"
)

// SubscriptionState enumerates the values for subscription state.
type SubscriptionState string

const (
	// Active specifies the active state for subscription state.
	Active SubscriptionState = "active"
	// Cancelled specifies the cancelled state for subscription state.
	Cancelled SubscriptionState = "cancelled"
	// Expired specifies the expired state for subscription state.
	Expired SubscriptionState = "expired"
	// Rejected specifies the rejected state for subscription state.
	Rejected SubscriptionState = "rejected"
	// Submitted specifies the submitted state for subscription state.
	Submitted SubscriptionState = "submitted"
	// Suspended specifies the suspended state for subscription state.
	Suspended SubscriptionState = "suspended"
)

// TemplateName enumerates the values for template name.
type TemplateName string

const (
	// AccountClosedDeveloper specifies the account closed developer state for template name.
	AccountClosedDeveloper TemplateName = "accountClosedDeveloper"
	// ApplicationApprovedNotificationMessage specifies the application approved notification message state for template
	// name.
	ApplicationApprovedNotificationMessage TemplateName = "applicationApprovedNotificationMessage"
	// ConfirmSignUpIdentityDefault specifies the confirm sign up identity default state for template name.
	ConfirmSignUpIdentityDefault TemplateName = "confirmSignUpIdentityDefault"
	// EmailChangeIdentityDefault specifies the email change identity default state for template name.
	EmailChangeIdentityDefault TemplateName = "emailChangeIdentityDefault"
	// InviteUserNotificationMessage specifies the invite user notification message state for template name.
	InviteUserNotificationMessage TemplateName = "inviteUserNotificationMessage"
	// NewCommentNotificationMessage specifies the new comment notification message state for template name.
	NewCommentNotificationMessage TemplateName = "newCommentNotificationMessage"
	// NewDeveloperNotificationMessage specifies the new developer notification message state for template name.
	NewDeveloperNotificationMessage TemplateName = "newDeveloperNotificationMessage"
	// NewIssueNotificationMessage specifies the new issue notification message state for template name.
	NewIssueNotificationMessage TemplateName = "newIssueNotificationMessage"
	// PasswordResetByAdminNotificationMessage specifies the password reset by admin notification message state for
	// template name.
	PasswordResetByAdminNotificationMessage TemplateName = "passwordResetByAdminNotificationMessage"
	// PasswordResetIdentityDefault specifies the password reset identity default state for template name.
	PasswordResetIdentityDefault TemplateName = "passwordResetIdentityDefault"
	// PurchaseDeveloperNotificationMessage specifies the purchase developer notification message state for template name.
	PurchaseDeveloperNotificationMessage TemplateName = "purchaseDeveloperNotificationMessage"
	// QuotaLimitApproachingDeveloperNotificationMessage specifies the quota limit approaching developer notification
	// message state for template name.
	QuotaLimitApproachingDeveloperNotificationMessage TemplateName = "quotaLimitApproachingDeveloperNotificationMessage"
	// RejectDeveloperNotificationMessage specifies the reject developer notification message state for template name.
	RejectDeveloperNotificationMessage TemplateName = "rejectDeveloperNotificationMessage"
	// RequestDeveloperNotificationMessage specifies the request developer notification message state for template name.
	RequestDeveloperNotificationMessage TemplateName = "requestDeveloperNotificationMessage"
)

// UserState enumerates the values for user state.
type UserState string

const (
	// UserStateActive specifies the user state active state for user state.
	UserStateActive UserState = "active"
	// UserStateBlocked specifies the user state blocked state for user state.
	UserStateBlocked UserState = "blocked"
)

// VirtualNetworkType enumerates the values for virtual network type.
type VirtualNetworkType string

const (
	// VirtualNetworkTypeExternal specifies the virtual network type external state for virtual network type.
	VirtualNetworkTypeExternal VirtualNetworkType = "External"
	// VirtualNetworkTypeInternal specifies the virtual network type internal state for virtual network type.
	VirtualNetworkTypeInternal VirtualNetworkType = "Internal"
	// VirtualNetworkTypeNone specifies the virtual network type none state for virtual network type.
	VirtualNetworkTypeNone VirtualNetworkType = "None"
)

// AccessInformationContract is tenant access information contract of the API Management service.
type AccessInformationContract struct {
	autorest.Response `json:"-"`
	ID                *string `json:"id,omitempty"`
	PrimaryKey        *string `json:"primaryKey,omitempty"`
	SecondaryKey      *string `json:"secondaryKey,omitempty"`
	Enabled           *bool   `json:"enabled,omitempty"`
}

// AccessInformationUpdateParameters is tenant access information update parameters of the API Management service.
type AccessInformationUpdateParameters struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// AdditionalLocation is description of an additional API Management resource location.
type AdditionalLocation struct {
	Location                    *string                      `json:"location,omitempty"`
	Sku                         *ServiceSkuProperties        `json:"sku,omitempty"`
	StaticIps                   *[]string                    `json:"staticIps,omitempty"`
	VirtualNetworkConfiguration *VirtualNetworkConfiguration `json:"virtualNetworkConfiguration,omitempty"`
	GatewayRegionalURL          *string                      `json:"gatewayRegionalUrl,omitempty"`
}

// APICollection is paged Api list representation.
type APICollection struct {
	autorest.Response `json:"-"`
	Value             *[]APIContract `json:"value,omitempty"`
	NextLink          *string        `json:"nextLink,omitempty"`
}

// APICollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client APICollection) APICollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// APIContract is API details.
type APIContract struct {
	autorest.Response      `json:"-"`
	ID                     *string `json:"id,omitempty"`
	Name                   *string `json:"name,omitempty"`
	Type                   *string `json:"type,omitempty"`
	*APIContractProperties `json:"properties,omitempty"`
}

// APIContractProperties is api Entity Properties
type APIContractProperties struct {
	Description                   *string                                `json:"description,omitempty"`
	AuthenticationSettings        *AuthenticationSettingsContract        `json:"authenticationSettings,omitempty"`
	SubscriptionKeyParameterNames *SubscriptionKeyParameterNamesContract `json:"subscriptionKeyParameterNames,omitempty"`
	APIType                       APIType                                `json:"type,omitempty"`
	APIRevision                   *string                                `json:"apiRevision,omitempty"`
	IsCurrent                     *bool                                  `json:"isCurrent,omitempty"`
	IsOnline                      *bool                                  `json:"isOnline,omitempty"`
	DisplayName                   *string                                `json:"displayName,omitempty"`
	ServiceURL                    *string                                `json:"serviceUrl,omitempty"`
	Path                          *string                                `json:"path,omitempty"`
	Protocols                     *[]Protocol                            `json:"protocols,omitempty"`
}

// APIContractUpdateProperties is API update contract properties.
type APIContractUpdateProperties struct {
	Description                   *string                                `json:"description,omitempty"`
	AuthenticationSettings        *AuthenticationSettingsContract        `json:"authenticationSettings,omitempty"`
	SubscriptionKeyParameterNames *SubscriptionKeyParameterNamesContract `json:"subscriptionKeyParameterNames,omitempty"`
	APIType                       APIType                                `json:"type,omitempty"`
	APIRevision                   *string                                `json:"apiRevision,omitempty"`
	IsCurrent                     *bool                                  `json:"isCurrent,omitempty"`
	IsOnline                      *bool                                  `json:"isOnline,omitempty"`
	DisplayName                   *string                                `json:"displayName,omitempty"`
	ServiceURL                    *string                                `json:"serviceUrl,omitempty"`
	Path                          *string                                `json:"path,omitempty"`
	Protocols                     *[]Protocol                            `json:"protocols,omitempty"`
}

// APICreateOrUpdateParameter is API Create or Update Parameters.
type APICreateOrUpdateParameter struct {
	*APICreateOrUpdateProperties `json:"properties,omitempty"`
}

// APICreateOrUpdateProperties is api Create or Update Properties.
type APICreateOrUpdateProperties struct {
	Description                   *string                                  `json:"description,omitempty"`
	AuthenticationSettings        *AuthenticationSettingsContract          `json:"authenticationSettings,omitempty"`
	SubscriptionKeyParameterNames *SubscriptionKeyParameterNamesContract   `json:"subscriptionKeyParameterNames,omitempty"`
	APIType                       APIType                                  `json:"type,omitempty"`
	APIRevision                   *string                                  `json:"apiRevision,omitempty"`
	IsCurrent                     *bool                                    `json:"isCurrent,omitempty"`
	IsOnline                      *bool                                    `json:"isOnline,omitempty"`
	DisplayName                   *string                                  `json:"displayName,omitempty"`
	ServiceURL                    *string                                  `json:"serviceUrl,omitempty"`
	Path                          *string                                  `json:"path,omitempty"`
	Protocols                     *[]Protocol                              `json:"protocols,omitempty"`
	ContentValue                  *string                                  `json:"contentValue,omitempty"`
	ContentFormat                 ContentFormat                            `json:"contentFormat,omitempty"`
	WsdlSelector                  *APICreateOrUpdatePropertiesWsdlSelector `json:"wsdlSelector,omitempty"`
}

// APICreateOrUpdatePropertiesWsdlSelector is criteria to limit import of WSDL to a subset of the document.
type APICreateOrUpdatePropertiesWsdlSelector struct {
	WsdlServiceName  *string `json:"wsdlServiceName,omitempty"`
	WsdlEndpointName *string `json:"wsdlEndpointName,omitempty"`
}

// APIEntityBaseContract is API base contract details.
type APIEntityBaseContract struct {
	Description                   *string                                `json:"description,omitempty"`
	AuthenticationSettings        *AuthenticationSettingsContract        `json:"authenticationSettings,omitempty"`
	SubscriptionKeyParameterNames *SubscriptionKeyParameterNamesContract `json:"subscriptionKeyParameterNames,omitempty"`
	APIType                       APIType                                `json:"type,omitempty"`
	APIRevision                   *string                                `json:"apiRevision,omitempty"`
	IsCurrent                     *bool                                  `json:"isCurrent,omitempty"`
	IsOnline                      *bool                                  `json:"isOnline,omitempty"`
}

// APIExportResult is API Export result Blob Uri.
type APIExportResult struct {
	autorest.Response `json:"-"`
	Link              *string `json:"link,omitempty"`
}

// ApimResource is the Resource definition.
type ApimResource struct {
	ID   *string             `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
	Type *string             `json:"type,omitempty"`
	Tags *map[string]*string `json:"tags,omitempty"`
}

// APIUpdateContract is API update contract details.
type APIUpdateContract struct {
	*APIContractUpdateProperties `json:"properties,omitempty"`
}

// AuthenticationSettingsContract is API Authentication Settings.
type AuthenticationSettingsContract struct {
	OAuth2 *OAuth2AuthenticationSettingsContract `json:"oAuth2,omitempty"`
}

// AuthorizationServerCollection is paged OAuth2 Authorization Servers list representation.
type AuthorizationServerCollection struct {
	autorest.Response `json:"-"`
	Value             *[]AuthorizationServerContract `json:"value,omitempty"`
	Count             *int64                         `json:"count,omitempty"`
	NextLink          *string                        `json:"nextLink,omitempty"`
}

// AuthorizationServerCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client AuthorizationServerCollection) AuthorizationServerCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// AuthorizationServerContract is external OAuth authorization server settings.
type AuthorizationServerContract struct {
	autorest.Response                      `json:"-"`
	ID                                     *string `json:"id,omitempty"`
	Name                                   *string `json:"name,omitempty"`
	Type                                   *string `json:"type,omitempty"`
	*AuthorizationServerContractProperties `json:"properties,omitempty"`
}

// AuthorizationServerContractBaseProperties is external OAuth authorization server Update settings contract.
type AuthorizationServerContractBaseProperties struct {
	Description                *string                       `json:"description,omitempty"`
	AuthorizationMethods       *[]AuthorizationMethod        `json:"authorizationMethods,omitempty"`
	ClientAuthenticationMethod *[]ClientAuthenticationMethod `json:"clientAuthenticationMethod,omitempty"`
	TokenBodyParameters        *[]TokenBodyParameterContract `json:"tokenBodyParameters,omitempty"`
	TokenEndpoint              *string                       `json:"tokenEndpoint,omitempty"`
	SupportState               *bool                         `json:"supportState,omitempty"`
	DefaultScope               *string                       `json:"defaultScope,omitempty"`
	BearerTokenSendingMethods  *[]BearerTokenSendingMethod   `json:"bearerTokenSendingMethods,omitempty"`
	ClientSecret               *string                       `json:"clientSecret,omitempty"`
	ResourceOwnerUsername      *string                       `json:"resourceOwnerUsername,omitempty"`
	ResourceOwnerPassword      *string                       `json:"resourceOwnerPassword,omitempty"`
}

// AuthorizationServerContractProperties is external OAuth authorization server settings Properties.
type AuthorizationServerContractProperties struct {
	Description                *string                       `json:"description,omitempty"`
	AuthorizationMethods       *[]AuthorizationMethod        `json:"authorizationMethods,omitempty"`
	ClientAuthenticationMethod *[]ClientAuthenticationMethod `json:"clientAuthenticationMethod,omitempty"`
	TokenBodyParameters        *[]TokenBodyParameterContract `json:"tokenBodyParameters,omitempty"`
	TokenEndpoint              *string                       `json:"tokenEndpoint,omitempty"`
	SupportState               *bool                         `json:"supportState,omitempty"`
	DefaultScope               *string                       `json:"defaultScope,omitempty"`
	BearerTokenSendingMethods  *[]BearerTokenSendingMethod   `json:"bearerTokenSendingMethods,omitempty"`
	ClientSecret               *string                       `json:"clientSecret,omitempty"`
	ResourceOwnerUsername      *string                       `json:"resourceOwnerUsername,omitempty"`
	ResourceOwnerPassword      *string                       `json:"resourceOwnerPassword,omitempty"`
	DisplayName                *string                       `json:"displayName,omitempty"`
	ClientRegistrationEndpoint *string                       `json:"clientRegistrationEndpoint,omitempty"`
	AuthorizationEndpoint      *string                       `json:"authorizationEndpoint,omitempty"`
	GrantTypes                 *[]GrantType                  `json:"grantTypes,omitempty"`
	ClientID                   *string                       `json:"clientId,omitempty"`
}

// AuthorizationServerUpdateContract is external OAuth authorization server settings.
type AuthorizationServerUpdateContract struct {
	ID                                           *string `json:"id,omitempty"`
	Name                                         *string `json:"name,omitempty"`
	Type                                         *string `json:"type,omitempty"`
	*AuthorizationServerUpdateContractProperties `json:"properties,omitempty"`
}

// AuthorizationServerUpdateContractProperties is external OAuth authorization server Update settings contract.
type AuthorizationServerUpdateContractProperties struct {
	Description                *string                       `json:"description,omitempty"`
	AuthorizationMethods       *[]AuthorizationMethod        `json:"authorizationMethods,omitempty"`
	ClientAuthenticationMethod *[]ClientAuthenticationMethod `json:"clientAuthenticationMethod,omitempty"`
	TokenBodyParameters        *[]TokenBodyParameterContract `json:"tokenBodyParameters,omitempty"`
	TokenEndpoint              *string                       `json:"tokenEndpoint,omitempty"`
	SupportState               *bool                         `json:"supportState,omitempty"`
	DefaultScope               *string                       `json:"defaultScope,omitempty"`
	BearerTokenSendingMethods  *[]BearerTokenSendingMethod   `json:"bearerTokenSendingMethods,omitempty"`
	ClientSecret               *string                       `json:"clientSecret,omitempty"`
	ResourceOwnerUsername      *string                       `json:"resourceOwnerUsername,omitempty"`
	ResourceOwnerPassword      *string                       `json:"resourceOwnerPassword,omitempty"`
	DisplayName                *string                       `json:"displayName,omitempty"`
	ClientRegistrationEndpoint *string                       `json:"clientRegistrationEndpoint,omitempty"`
	AuthorizationEndpoint      *string                       `json:"authorizationEndpoint,omitempty"`
	GrantTypes                 *[]GrantType                  `json:"grantTypes,omitempty"`
	ClientID                   *string                       `json:"clientId,omitempty"`
}

// BackendAuthorizationHeaderCredentials is authorization header information.
type BackendAuthorizationHeaderCredentials struct {
	Scheme    *string `json:"scheme,omitempty"`
	Parameter *string `json:"parameter,omitempty"`
}

// BackendBaseParameters is backend entity base Parameter set.
type BackendBaseParameters struct {
	Title       *string                     `json:"title,omitempty"`
	Description *string                     `json:"description,omitempty"`
	ResourceID  *string                     `json:"resourceId,omitempty"`
	Properties  *BackendProperties          `json:"properties,omitempty"`
	Credentials *BackendCredentialsContract `json:"credentials,omitempty"`
	Proxy       *BackendProxyContract       `json:"proxy,omitempty"`
	TLS         *BackendTLSProperties       `json:"tls,omitempty"`
}

// BackendCollection is paged Backend list representation.
type BackendCollection struct {
	autorest.Response `json:"-"`
	Value             *[]BackendContract `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// BackendCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client BackendCollection) BackendCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// BackendContract is backend details.
type BackendContract struct {
	autorest.Response          `json:"-"`
	ID                         *string `json:"id,omitempty"`
	Name                       *string `json:"name,omitempty"`
	Type                       *string `json:"type,omitempty"`
	*BackendContractProperties `json:"properties,omitempty"`
}

// BackendContractProperties is parameters supplied to the Create Backend operation.
type BackendContractProperties struct {
	Title       *string                     `json:"title,omitempty"`
	Description *string                     `json:"description,omitempty"`
	ResourceID  *string                     `json:"resourceId,omitempty"`
	Properties  *BackendProperties          `json:"properties,omitempty"`
	Credentials *BackendCredentialsContract `json:"credentials,omitempty"`
	Proxy       *BackendProxyContract       `json:"proxy,omitempty"`
	TLS         *BackendTLSProperties       `json:"tls,omitempty"`
	URL         *string                     `json:"url,omitempty"`
	Protocol    BackendProtocol             `json:"protocol,omitempty"`
}

// BackendCredentialsContract is details of the Credentials used to connect to Backend.
type BackendCredentialsContract struct {
	Certificate   *[]string                              `json:"certificate,omitempty"`
	Query         *map[string][]string                   `json:"query,omitempty"`
	Header        *map[string][]string                   `json:"header,omitempty"`
	Authorization *BackendAuthorizationHeaderCredentials `json:"authorization,omitempty"`
}

// BackendProperties is properties specific to the Backend Type.
type BackendProperties struct {
	ServiceFabricCluster *BackendServiceFabricClusterProperties `json:"serviceFabricCluster,omitempty"`
}

// BackendProxyContract is details of the Backend WebProxy Server to use in the Request to Backend.
type BackendProxyContract struct {
	URL      *string `json:"url,omitempty"`
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
}

// BackendServiceFabricClusterProperties is properties of the Service Fabric Type Backend.
type BackendServiceFabricClusterProperties struct {
	ClientCertificatethumbprint   *string                `json:"clientCertificatethumbprint,omitempty"`
	MaxPartitionResolutionRetries *int32                 `json:"maxPartitionResolutionRetries,omitempty"`
	ManagementEndpoints           *[]string              `json:"managementEndpoints,omitempty"`
	ServerCertificateThumbprints  *[]string              `json:"serverCertificateThumbprints,omitempty"`
	ServerX509Names               *[]X509CertificateName `json:"serverX509Names,omitempty"`
}

// BackendTLSProperties is properties controlling TLS Certificate Validation.
type BackendTLSProperties struct {
	ValidateCertificateChain *bool `json:"validateCertificateChain,omitempty"`
	ValidateCertificateName  *bool `json:"validateCertificateName,omitempty"`
}

// BackendUpdateParameterProperties is parameters supplied to the Update Backend operation.
type BackendUpdateParameterProperties struct {
	Title       *string                     `json:"title,omitempty"`
	Description *string                     `json:"description,omitempty"`
	ResourceID  *string                     `json:"resourceId,omitempty"`
	Properties  *BackendProperties          `json:"properties,omitempty"`
	Credentials *BackendCredentialsContract `json:"credentials,omitempty"`
	Proxy       *BackendProxyContract       `json:"proxy,omitempty"`
	TLS         *BackendTLSProperties       `json:"tls,omitempty"`
	URL         *string                     `json:"url,omitempty"`
	Protocol    BackendProtocol             `json:"protocol,omitempty"`
}

// BackendUpdateParameters is backend update parameters.
type BackendUpdateParameters struct {
	*BackendUpdateParameterProperties `json:"properties,omitempty"`
}

// CertificateCollection is paged Certificates list representation.
type CertificateCollection struct {
	autorest.Response `json:"-"`
	Value             *[]CertificateContract `json:"value,omitempty"`
	NextLink          *string                `json:"nextLink,omitempty"`
}

// CertificateCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client CertificateCollection) CertificateCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// CertificateConfiguration is certificate configuration which consist of non-trusted intermediates and root
// certificates.
type CertificateConfiguration struct {
	EncodedCertificate  *string                 `json:"encodedCertificate,omitempty"`
	CertificatePassword *string                 `json:"certificatePassword,omitempty"`
	StoreName           StoreName               `json:"storeName,omitempty"`
	Certificate         *CertificateInformation `json:"certificate,omitempty"`
}

// CertificateContract is certificate details.
type CertificateContract struct {
	autorest.Response              `json:"-"`
	ID                             *string `json:"id,omitempty"`
	Name                           *string `json:"name,omitempty"`
	Type                           *string `json:"type,omitempty"`
	*CertificateContractProperties `json:"properties,omitempty"`
}

// CertificateContractProperties is properties of the Certificate contract.
type CertificateContractProperties struct {
	Subject        *string    `json:"subject,omitempty"`
	Thumbprint     *string    `json:"thumbprint,omitempty"`
	ExpirationDate *date.Time `json:"expirationDate,omitempty"`
}

// CertificateCreateOrUpdateParameters is certificate create or update details.
type CertificateCreateOrUpdateParameters struct {
	*CertificateCreateOrUpdateProperties `json:"properties,omitempty"`
}

// CertificateCreateOrUpdateProperties is parameters supplied to the CreateOrUpdate certificate operation.
type CertificateCreateOrUpdateProperties struct {
	Data     *string `json:"data,omitempty"`
	Password *string `json:"password,omitempty"`
}

// CertificateInformation is SSL certificate information.
type CertificateInformation struct {
	autorest.Response `json:"-"`
	Expiry            *date.Time `json:"expiry,omitempty"`
	Thumbprint        *string    `json:"thumbprint,omitempty"`
	Subject           *string    `json:"subject,omitempty"`
}

// ConnectivityStatusContract is details about connectivity to a resource.
type ConnectivityStatusContract struct {
	Name             *string                `json:"name,omitempty"`
	Status           ConnectivityStatusType `json:"status,omitempty"`
	Error            *string                `json:"error,omitempty"`
	LastUpdated      *date.Time             `json:"lastUpdated,omitempty"`
	LastStatusChange *date.Time             `json:"lastStatusChange,omitempty"`
}

// DeployConfigurationParameters is parameters supplied to the Deploy Configuration operation.
type DeployConfigurationParameters struct {
	Branch *string `json:"branch,omitempty"`
	Force  *bool   `json:"force,omitempty"`
}

// EmailTemplateCollection is paged email template list representation.
type EmailTemplateCollection struct {
	autorest.Response `json:"-"`
	Value             *[]EmailTemplateContract `json:"value,omitempty"`
	NextLink          *string                  `json:"nextLink,omitempty"`
}

// EmailTemplateCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client EmailTemplateCollection) EmailTemplateCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// EmailTemplateContract is email Template details.
type EmailTemplateContract struct {
	autorest.Response                `json:"-"`
	ID                               *string `json:"id,omitempty"`
	Name                             *string `json:"name,omitempty"`
	Type                             *string `json:"type,omitempty"`
	*EmailTemplateContractProperties `json:"properties,omitempty"`
}

// EmailTemplateContractProperties is email Template Contract properties.
type EmailTemplateContractProperties struct {
	Subject     *string                                      `json:"subject,omitempty"`
	Body        *string                                      `json:"body,omitempty"`
	Title       *string                                      `json:"title,omitempty"`
	Description *string                                      `json:"description,omitempty"`
	IsDefault   *bool                                        `json:"isDefault,omitempty"`
	Parameters  *[]EmailTemplateParametersContractProperties `json:"parameters,omitempty"`
}

// EmailTemplateParametersContractProperties is email Template Parameter contract.
type EmailTemplateParametersContractProperties struct {
	Name        *string `json:"name,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
}

// EmailTemplateUpdateParameterProperties is email Template Update Contract properties.
type EmailTemplateUpdateParameterProperties struct {
	Subject     *string                                      `json:"subject,omitempty"`
	Title       *string                                      `json:"title,omitempty"`
	Description *string                                      `json:"description,omitempty"`
	Body        *string                                      `json:"body,omitempty"`
	Parameters  *[]EmailTemplateParametersContractProperties `json:"parameters,omitempty"`
}

// EmailTemplateUpdateParameters is email Template update Parameters.
type EmailTemplateUpdateParameters struct {
	*EmailTemplateUpdateParameterProperties `json:"properties,omitempty"`
}

// ErrorFieldContract is error Field contract.
type ErrorFieldContract struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Target  *string `json:"target,omitempty"`
}

// ErrorResponse is error Body contract.
type ErrorResponse struct {
	Code    *string               `json:"code,omitempty"`
	Message *string               `json:"message,omitempty"`
	Details *[]ErrorFieldContract `json:"details,omitempty"`
}

// GenerateSsoURLResult is generate SSO Url operations response details.
type GenerateSsoURLResult struct {
	autorest.Response `json:"-"`
	Value             *string `json:"value,omitempty"`
}

// GroupCollection is paged Group list representation.
type GroupCollection struct {
	autorest.Response `json:"-"`
	Value             *[]GroupContract `json:"value,omitempty"`
	NextLink          *string          `json:"nextLink,omitempty"`
}

// GroupCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client GroupCollection) GroupCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// GroupContract is contract details.
type GroupContract struct {
	autorest.Response        `json:"-"`
	ID                       *string `json:"id,omitempty"`
	Name                     *string `json:"name,omitempty"`
	Type                     *string `json:"type,omitempty"`
	*GroupContractProperties `json:"properties,omitempty"`
}

// GroupContractProperties is developer group.
type GroupContractProperties struct {
	DisplayName *string   `json:"displayName,omitempty"`
	Description *string   `json:"description,omitempty"`
	BuiltIn     *bool     `json:"builtIn,omitempty"`
	Type        GroupType `json:"type,omitempty"`
	ExternalID  *string   `json:"externalId,omitempty"`
}

// GroupCreateParameters is parameters supplied to the Create Group operation.
type GroupCreateParameters struct {
	*GroupCreateParametersProperties `json:"properties,omitempty"`
}

// GroupCreateParametersProperties is parameters supplied to the Create Group operation.
type GroupCreateParametersProperties struct {
	DisplayName *string   `json:"displayName,omitempty"`
	Description *string   `json:"description,omitempty"`
	Type        GroupType `json:"type,omitempty"`
	ExternalID  *string   `json:"externalId,omitempty"`
}

// GroupUpdateParameters is parameters supplied to the Update Group operation.
type GroupUpdateParameters struct {
	*GroupUpdateParametersProperties `json:"properties,omitempty"`
}

// GroupUpdateParametersProperties is parameters supplied to the Update Group operation.
type GroupUpdateParametersProperties struct {
	DisplayName *string   `json:"displayName,omitempty"`
	Description *string   `json:"description,omitempty"`
	Type        GroupType `json:"type,omitempty"`
	ExternalID  *string   `json:"externalId,omitempty"`
}

// HostnameConfiguration is custom hostname configuration.
type HostnameConfiguration struct {
	Type                       HostnameType            `json:"type,omitempty"`
	HostName                   *string                 `json:"hostName,omitempty"`
	EncodedCertificate         *string                 `json:"encodedCertificate,omitempty"`
	CertificatePassword        *string                 `json:"certificatePassword,omitempty"`
	DefaultSslBinding          *bool                   `json:"defaultSslBinding,omitempty"`
	NegotiateClientCertificate *bool                   `json:"negotiateClientCertificate,omitempty"`
	Certificate                *CertificateInformation `json:"certificate,omitempty"`
}

// HostnameConfigurationOld is custom hostname configuration.
type HostnameConfigurationOld struct {
	Type        HostnameType            `json:"type,omitempty"`
	Hostname    *string                 `json:"hostname,omitempty"`
	Certificate *CertificateInformation `json:"certificate,omitempty"`
}

// IdentityProviderBaseParameters is identity Provider Base Parameter Properties.
type IdentityProviderBaseParameters struct {
	Type                     IdentityProviderType `json:"type,omitempty"`
	AllowedTenants           *[]string            `json:"allowedTenants,omitempty"`
	SignupPolicyName         *string              `json:"signupPolicyName,omitempty"`
	SigninPolicyName         *string              `json:"signinPolicyName,omitempty"`
	ProfileEditingPolicyName *string              `json:"profileEditingPolicyName,omitempty"`
	PasswordResetPolicyName  *string              `json:"passwordResetPolicyName,omitempty"`
}

// IdentityProviderContract is identity Provider details.
type IdentityProviderContract struct {
	autorest.Response                   `json:"-"`
	ID                                  *string `json:"id,omitempty"`
	Name                                *string `json:"name,omitempty"`
	Type                                *string `json:"type,omitempty"`
	*IdentityProviderContractProperties `json:"properties,omitempty"`
}

// IdentityProviderContractProperties is the external Identity Providers like Facebook, Google, Microsoft, Twitter or
// Azure Active Directory which can be used to enable access to the API Management service developer portal for all
// users.
type IdentityProviderContractProperties struct {
	Type                     IdentityProviderType `json:"type,omitempty"`
	AllowedTenants           *[]string            `json:"allowedTenants,omitempty"`
	SignupPolicyName         *string              `json:"signupPolicyName,omitempty"`
	SigninPolicyName         *string              `json:"signinPolicyName,omitempty"`
	ProfileEditingPolicyName *string              `json:"profileEditingPolicyName,omitempty"`
	PasswordResetPolicyName  *string              `json:"passwordResetPolicyName,omitempty"`
	ClientID                 *string              `json:"clientId,omitempty"`
	ClientSecret             *string              `json:"clientSecret,omitempty"`
}

// IdentityProviderList is list of all the Identity Providers configured on the service instance.
type IdentityProviderList struct {
	autorest.Response `json:"-"`
	Value             *[]IdentityProviderContract `json:"value,omitempty"`
	NextLink          *string                     `json:"nextLink,omitempty"`
}

// IdentityProviderUpdateParameters is parameters supplied to update Identity Provider
type IdentityProviderUpdateParameters struct {
	*IdentityProviderUpdateProperties `json:"properties,omitempty"`
}

// IdentityProviderUpdateProperties is parameters supplied to the Update Identity Provider operation.
type IdentityProviderUpdateProperties struct {
	Type                     IdentityProviderType `json:"type,omitempty"`
	AllowedTenants           *[]string            `json:"allowedTenants,omitempty"`
	SignupPolicyName         *string              `json:"signupPolicyName,omitempty"`
	SigninPolicyName         *string              `json:"signinPolicyName,omitempty"`
	ProfileEditingPolicyName *string              `json:"profileEditingPolicyName,omitempty"`
	PasswordResetPolicyName  *string              `json:"passwordResetPolicyName,omitempty"`
	ClientID                 *string              `json:"clientId,omitempty"`
	ClientSecret             *string              `json:"clientSecret,omitempty"`
}

// LoggerCollection is paged Logger list representation.
type LoggerCollection struct {
	autorest.Response `json:"-"`
	Value             *[]LoggerContract `json:"value,omitempty"`
	Count             *int64            `json:"count,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// LoggerCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client LoggerCollection) LoggerCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// LoggerContract is logger details.
type LoggerContract struct {
	autorest.Response         `json:"-"`
	ID                        *string `json:"id,omitempty"`
	Name                      *string `json:"name,omitempty"`
	Type                      *string `json:"type,omitempty"`
	*LoggerContractProperties `json:"properties,omitempty"`
}

// LoggerContractProperties is the Logger entity in API Management represents an event sink that you can use to log API
// Management events. Currently the Logger entity supports logging API Management events to Azure Event Hubs.
type LoggerContractProperties struct {
	LoggerType  *string             `json:"loggerType,omitempty"`
	Description *string             `json:"description,omitempty"`
	Credentials *map[string]*string `json:"credentials,omitempty"`
	IsBuffered  *bool               `json:"isBuffered,omitempty"`
}

// LoggerUpdateContract is logger update contract.
type LoggerUpdateContract struct {
	*LoggerUpdateParameters `json:"properties,omitempty"`
}

// LoggerUpdateParameters is parameters supplied to the Update Logger operation.
type LoggerUpdateParameters struct {
	LoggerType  LoggerType          `json:"loggerType,omitempty"`
	Description *string             `json:"description,omitempty"`
	Credentials *map[string]*string `json:"credentials,omitempty"`
	IsBuffered  *bool               `json:"isBuffered,omitempty"`
}

// NetworkStatusContract is network Status details.
type NetworkStatusContract struct {
	autorest.Response  `json:"-"`
	DNSServers         *[]string                     `json:"dnsServers,omitempty"`
	ConnectivityStatus *[]ConnectivityStatusContract `json:"connectivityStatus,omitempty"`
}

// OAuth2AuthenticationSettingsContract is API OAuth2 Authentication settings details.
type OAuth2AuthenticationSettingsContract struct {
	AuthorizationServerID *string `json:"authorizationServerId,omitempty"`
	Scope                 *string `json:"scope,omitempty"`
}

// OpenIDConnectProviderCollection is paged OpenIdProviders list representation.
type OpenIDConnectProviderCollection struct {
	autorest.Response `json:"-"`
	Value             *[]OpenidConnectProviderContract `json:"value,omitempty"`
	NextLink          *string                          `json:"nextLink,omitempty"`
}

// OpenIDConnectProviderCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client OpenIDConnectProviderCollection) OpenIDConnectProviderCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// OpenidConnectProviderContract is openId Connect Provider details.
type OpenidConnectProviderContract struct {
	autorest.Response                        `json:"-"`
	ID                                       *string `json:"id,omitempty"`
	Name                                     *string `json:"name,omitempty"`
	Type                                     *string `json:"type,omitempty"`
	*OpenidConnectProviderContractProperties `json:"properties,omitempty"`
}

// OpenidConnectProviderContractProperties is openID Connect Providers Contract.
type OpenidConnectProviderContractProperties struct {
	DisplayName      *string `json:"displayName,omitempty"`
	Description      *string `json:"description,omitempty"`
	MetadataEndpoint *string `json:"metadataEndpoint,omitempty"`
	ClientID         *string `json:"clientId,omitempty"`
	ClientSecret     *string `json:"clientSecret,omitempty"`
}

// OpenidConnectProviderUpdateContract is parameters supplied to the Update OpenID Connect Provider operation.
type OpenidConnectProviderUpdateContract struct {
	*OpenidConnectProviderUpdateContractProperties `json:"properties,omitempty"`
}

// OpenidConnectProviderUpdateContractProperties is parameters supplied to the Update OpenID Connect Provider
// operation.
type OpenidConnectProviderUpdateContractProperties struct {
	DisplayName      *string `json:"displayName,omitempty"`
	Description      *string `json:"description,omitempty"`
	MetadataEndpoint *string `json:"metadataEndpoint,omitempty"`
	ClientID         *string `json:"clientId,omitempty"`
	ClientSecret     *string `json:"clientSecret,omitempty"`
}

// Operation is REST API operation
type Operation struct {
	Name    *string           `json:"name,omitempty"`
	Display *OperationDisplay `json:"display,omitempty"`
}

// OperationCollection is paged Operation list representation.
type OperationCollection struct {
	autorest.Response `json:"-"`
	Value             *[]OperationContract `json:"value,omitempty"`
	NextLink          *string              `json:"nextLink,omitempty"`
}

// OperationCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client OperationCollection) OperationCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// OperationContract is api Operation details.
type OperationContract struct {
	autorest.Response            `json:"-"`
	ID                           *string `json:"id,omitempty"`
	Name                         *string `json:"name,omitempty"`
	Type                         *string `json:"type,omitempty"`
	*OperationContractProperties `json:"properties,omitempty"`
}

// OperationContractProperties is operation Contract Properties
type OperationContractProperties struct {
	TemplateParameters *[]ParameterContract `json:"templateParameters,omitempty"`
	Description        *string              `json:"description,omitempty"`
	Request            *RequestContract     `json:"request,omitempty"`
	Responses          *[]ResponseContract  `json:"responses,omitempty"`
	Policies           *string              `json:"policies,omitempty"`
	DisplayName        *string              `json:"displayName,omitempty"`
	Method             *string              `json:"method,omitempty"`
	URLTemplate        *string              `json:"urlTemplate,omitempty"`
}

// OperationDisplay is the object that describes the operation.
type OperationDisplay struct {
	Provider    *string `json:"provider,omitempty"`
	Operation   *string `json:"operation,omitempty"`
	Resource    *string `json:"resource,omitempty"`
	Description *string `json:"description,omitempty"`
}

// OperationEntityBaseContract is api Operation Entity Base Contract details.
type OperationEntityBaseContract struct {
	TemplateParameters *[]ParameterContract `json:"templateParameters,omitempty"`
	Description        *string              `json:"description,omitempty"`
	Request            *RequestContract     `json:"request,omitempty"`
	Responses          *[]ResponseContract  `json:"responses,omitempty"`
	Policies           *string              `json:"policies,omitempty"`
}

// OperationListResult is result of the request to list REST API operations. It contains a list of operations and a URL
// nextLink to get the next set of results.
type OperationListResult struct {
	autorest.Response `json:"-"`
	Value             *[]Operation `json:"value,omitempty"`
	NextLink          *string      `json:"nextLink,omitempty"`
}

// OperationListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client OperationListResult) OperationListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// OperationResultContract is operation Result.
type OperationResultContract struct {
	autorest.Response `json:"-"`
	ID                *string              `json:"id,omitempty"`
	Status            AsyncOperationStatus `json:"status,omitempty"`
	Started           *date.Time           `json:"started,omitempty"`
	Updated           *date.Time           `json:"updated,omitempty"`
	ResultInfo        *string              `json:"resultInfo,omitempty"`
	Error             *ErrorResponse       `json:"error,omitempty"`
}

// OperationUpdateContract is api Operation Update Contract details.
type OperationUpdateContract struct {
	*OperationUpdateContractProperties `json:"properties,omitempty"`
}

// OperationUpdateContractProperties is operation Update Contract Properties.
type OperationUpdateContractProperties struct {
	TemplateParameters *[]ParameterContract `json:"templateParameters,omitempty"`
	Description        *string              `json:"description,omitempty"`
	Request            *RequestContract     `json:"request,omitempty"`
	Responses          *[]ResponseContract  `json:"responses,omitempty"`
	Policies           *string              `json:"policies,omitempty"`
	DisplayName        *string              `json:"displayName,omitempty"`
	Method             *string              `json:"method,omitempty"`
	URLTemplate        *string              `json:"urlTemplate,omitempty"`
}

// ParameterContract is operation parameters details.
type ParameterContract struct {
	Name         *string   `json:"name,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Type         *string   `json:"type,omitempty"`
	DefaultValue *string   `json:"defaultValue,omitempty"`
	Required     *bool     `json:"required,omitempty"`
	Values       *[]string `json:"values,omitempty"`
}

// PolicyCollection is the response of the list policy operation.
type PolicyCollection struct {
	autorest.Response `json:"-"`
	Value             *[]PolicyContract `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// PolicyContract is policy Contract details.
type PolicyContract struct {
	autorest.Response         `json:"-"`
	ID                        *string `json:"id,omitempty"`
	Name                      *string `json:"name,omitempty"`
	Type                      *string `json:"type,omitempty"`
	*PolicyContractProperties `json:"properties,omitempty"`
}

// PolicyContractProperties is policy contract Properties.
type PolicyContractProperties struct {
	PolicyContent *string `json:"policyContent,omitempty"`
}

// PolicySnippetContract is policy snippet.
type PolicySnippetContract struct {
	Name    *string `json:"name,omitempty"`
	Content *string `json:"content,omitempty"`
	ToolTip *string `json:"toolTip,omitempty"`
	Scope   *int32  `json:"scope,omitempty"`
}

// PolicySnippetsCollection is the response of the list policy snippets operation.
type PolicySnippetsCollection struct {
	autorest.Response `json:"-"`
	Value             *[]PolicySnippetContract `json:"value,omitempty"`
}

// PortalDelegationSettings is delegation settings for a developer portal.
type PortalDelegationSettings struct {
	autorest.Response                   `json:"-"`
	ID                                  *string `json:"id,omitempty"`
	Name                                *string `json:"name,omitempty"`
	Type                                *string `json:"type,omitempty"`
	*PortalDelegationSettingsProperties `json:"properties,omitempty"`
}

// PortalDelegationSettingsProperties is delegation settings contract properties.
type PortalDelegationSettingsProperties struct {
	URL              *string                                    `json:"url,omitempty"`
	ValidationKey    *string                                    `json:"validationKey,omitempty"`
	Subscriptions    *SubscriptionsDelegationSettingsProperties `json:"subscriptions,omitempty"`
	UserRegistration *RegistrationDelegationSettingsProperties  `json:"userRegistration,omitempty"`
}

// PortalSigninSettingProperties is sign-in settings contract properties.
type PortalSigninSettingProperties struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// PortalSigninSettings is sign-In settings for the Developer Portal.
type PortalSigninSettings struct {
	autorest.Response              `json:"-"`
	ID                             *string `json:"id,omitempty"`
	Name                           *string `json:"name,omitempty"`
	Type                           *string `json:"type,omitempty"`
	*PortalSigninSettingProperties `json:"properties,omitempty"`
}

// PortalSignupSettings is sign-Up settings for a developer portal.
type PortalSignupSettings struct {
	autorest.Response               `json:"-"`
	ID                              *string `json:"id,omitempty"`
	Name                            *string `json:"name,omitempty"`
	Type                            *string `json:"type,omitempty"`
	*PortalSignupSettingsProperties `json:"properties,omitempty"`
}

// PortalSignupSettingsProperties is sign-up settings contract properties.
type PortalSignupSettingsProperties struct {
	Enabled        *bool                     `json:"enabled,omitempty"`
	TermsOfService *TermsOfServiceProperties `json:"termsOfService,omitempty"`
}

// ProductCollection is paged Products list representation.
type ProductCollection struct {
	autorest.Response `json:"-"`
	Value             *[]ProductContract `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// ProductCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ProductCollection) ProductCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ProductContract is product details.
type ProductContract struct {
	autorest.Response          `json:"-"`
	ID                         *string `json:"id,omitempty"`
	Name                       *string `json:"name,omitempty"`
	Type                       *string `json:"type,omitempty"`
	*ProductContractProperties `json:"properties,omitempty"`
}

// ProductContractProperties is product profile.
type ProductContractProperties struct {
	Description          *string      `json:"description,omitempty"`
	Terms                *string      `json:"terms,omitempty"`
	SubscriptionRequired *bool        `json:"subscriptionRequired,omitempty"`
	ApprovalRequired     *bool        `json:"approvalRequired,omitempty"`
	SubscriptionsLimit   *int32       `json:"subscriptionsLimit,omitempty"`
	State                ProductState `json:"state,omitempty"`
	DisplayName          *string      `json:"displayName,omitempty"`
}

// ProductEntityBaseParameters is product Entity Base Parameters
type ProductEntityBaseParameters struct {
	Description          *string      `json:"description,omitempty"`
	Terms                *string      `json:"terms,omitempty"`
	SubscriptionRequired *bool        `json:"subscriptionRequired,omitempty"`
	ApprovalRequired     *bool        `json:"approvalRequired,omitempty"`
	SubscriptionsLimit   *int32       `json:"subscriptionsLimit,omitempty"`
	State                ProductState `json:"state,omitempty"`
}

// ProductUpdateParameters is product Update parameters.
type ProductUpdateParameters struct {
	*ProductUpdateProperties `json:"properties,omitempty"`
}

// ProductUpdateProperties is parameters supplied to the Update Product operation.
type ProductUpdateProperties struct {
	Description          *string      `json:"description,omitempty"`
	Terms                *string      `json:"terms,omitempty"`
	SubscriptionRequired *bool        `json:"subscriptionRequired,omitempty"`
	ApprovalRequired     *bool        `json:"approvalRequired,omitempty"`
	SubscriptionsLimit   *int32       `json:"subscriptionsLimit,omitempty"`
	State                ProductState `json:"state,omitempty"`
	DisplayName          *string      `json:"displayName,omitempty"`
}

// PropertyCollection is paged Property list representation.
type PropertyCollection struct {
	autorest.Response `json:"-"`
	Value             *[]PropertyContract `json:"value,omitempty"`
	NextLink          *string             `json:"nextLink,omitempty"`
}

// PropertyCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client PropertyCollection) PropertyCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// PropertyContract is property details.
type PropertyContract struct {
	autorest.Response           `json:"-"`
	ID                          *string `json:"id,omitempty"`
	Name                        *string `json:"name,omitempty"`
	Type                        *string `json:"type,omitempty"`
	*PropertyContractProperties `json:"properties,omitempty"`
}

// PropertyContractProperties is property Contract properties.
type PropertyContractProperties struct {
	Tags        *[]string `json:"tags,omitempty"`
	Secret      *bool     `json:"secret,omitempty"`
	DisplayName *string   `json:"displayName,omitempty"`
	Value       *string   `json:"value,omitempty"`
}

// PropertyEntityBaseParameters is property Entity Base Parameters set.
type PropertyEntityBaseParameters struct {
	Tags   *[]string `json:"tags,omitempty"`
	Secret *bool     `json:"secret,omitempty"`
}

// PropertyUpdateParameterProperties is property Contract properties.
type PropertyUpdateParameterProperties struct {
	Tags        *[]string `json:"tags,omitempty"`
	Secret      *bool     `json:"secret,omitempty"`
	DisplayName *string   `json:"displayName,omitempty"`
	Value       *string   `json:"value,omitempty"`
}

// PropertyUpdateParameters is property update Parameters.
type PropertyUpdateParameters struct {
	*PropertyUpdateParameterProperties `json:"properties,omitempty"`
}

// QuotaCounterCollection is paged Quota Counter list representation.
type QuotaCounterCollection struct {
	autorest.Response `json:"-"`
	Value             *[]QuotaCounterContract `json:"value,omitempty"`
	Count             *int64                  `json:"count,omitempty"`
	NextLink          *string                 `json:"nextLink,omitempty"`
}

// QuotaCounterContract is quota counter details.
type QuotaCounterContract struct {
	autorest.Response `json:"-"`
	CounterKey        *string                              `json:"counterKey,omitempty"`
	PeriodKey         *string                              `json:"periodKey,omitempty"`
	PeriodStartTime   *date.Time                           `json:"periodStartTime,omitempty"`
	PeriodEndTime     *date.Time                           `json:"periodEndTime,omitempty"`
	Value             *QuotaCounterValueContractProperties `json:"Value,omitempty"`
}

// QuotaCounterValueContract is quota counter value details.
type QuotaCounterValueContract struct {
	*QuotaCounterValueContractProperties `json:"value,omitempty"`
}

// QuotaCounterValueContractProperties is quota counter value details.
type QuotaCounterValueContractProperties struct {
	CallsCount    *int32   `json:"callsCount,omitempty"`
	KbTransferred *float64 `json:"kbTransferred,omitempty"`
}

// RegionContract is region profile.
type RegionContract struct {
	Name           *string `json:"name,omitempty"`
	IsMasterRegion *bool   `json:"isMasterRegion,omitempty"`
	IsDeleted      *bool   `json:"isDeleted,omitempty"`
}

// RegionListResult is lists Regions operation response details.
type RegionListResult struct {
	autorest.Response `json:"-"`
	Value             *[]RegionContract `json:"value,omitempty"`
	Count             *int64            `json:"count,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// RegistrationDelegationSettingsProperties is user registration delegation settings properties.
type RegistrationDelegationSettingsProperties struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// ReportCollection is paged Report records list representation.
type ReportCollection struct {
	autorest.Response `json:"-"`
	Value             *[]ReportRecordContract `json:"value,omitempty"`
	Count             *int64                  `json:"count,omitempty"`
	NextLink          *string                 `json:"nextLink,omitempty"`
}

// ReportCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ReportCollection) ReportCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ReportRecordContract is report data.
type ReportRecordContract struct {
	Name             *string    `json:"name,omitempty"`
	Timestamp        *date.Time `json:"timestamp,omitempty"`
	Interval         *string    `json:"interval,omitempty"`
	Country          *string    `json:"country,omitempty"`
	Region           *string    `json:"region,omitempty"`
	Zip              *string    `json:"zip,omitempty"`
	UserID           *string    `json:"userId,omitempty"`
	ProductID        *string    `json:"productId,omitempty"`
	APIID            *string    `json:"apiId,omitempty"`
	OperationID      *string    `json:"operationId,omitempty"`
	APIRegion        *string    `json:"apiRegion,omitempty"`
	SubscriptionID   *string    `json:"subscriptionId,omitempty"`
	CallCountSuccess *int32     `json:"callCountSuccess,omitempty"`
	CallCountBlocked *int32     `json:"callCountBlocked,omitempty"`
	CallCountFailed  *int32     `json:"callCountFailed,omitempty"`
	CallCountOther   *int32     `json:"callCountOther,omitempty"`
	CallCountTotal   *int32     `json:"callCountTotal,omitempty"`
	Bandwidth        *int64     `json:"bandwidth,omitempty"`
	CacheHitCount    *int32     `json:"cacheHitCount,omitempty"`
	CacheMissCount   *int32     `json:"cacheMissCount,omitempty"`
	APITimeAvg       *float64   `json:"apiTimeAvg,omitempty"`
	APITimeMin       *float64   `json:"apiTimeMin,omitempty"`
	APITimeMax       *float64   `json:"apiTimeMax,omitempty"`
	ServiceTimeAvg   *float64   `json:"serviceTimeAvg,omitempty"`
	ServiceTimeMin   *float64   `json:"serviceTimeMin,omitempty"`
	ServiceTimeMax   *float64   `json:"serviceTimeMax,omitempty"`
}

// RepresentationContract is operation request/response representation details.
type RepresentationContract struct {
	ContentType    *string              `json:"contentType,omitempty"`
	Sample         *string              `json:"sample,omitempty"`
	SchemaID       *string              `json:"schemaId,omitempty"`
	TypeName       *string              `json:"typeName,omitempty"`
	FormParameters *[]ParameterContract `json:"formParameters,omitempty"`
}

// RequestContract is operation request details.
type RequestContract struct {
	Description     *string                   `json:"description,omitempty"`
	QueryParameters *[]ParameterContract      `json:"queryParameters,omitempty"`
	Headers         *[]ParameterContract      `json:"headers,omitempty"`
	Representations *[]RepresentationContract `json:"representations,omitempty"`
}

// RequestReportCollection is paged Report records list representation.
type RequestReportCollection struct {
	autorest.Response `json:"-"`
	Value             *[]RequestReportRecordContract `json:"value,omitempty"`
	Count             *int64                         `json:"count,omitempty"`
}

// RequestReportRecordContract is request Report data.
type RequestReportRecordContract struct {
	APIID               *string    `json:"apiId,omitempty"`
	OperationID         *string    `json:"operationId,omitempty"`
	ProductID           *string    `json:"productId,omitempty"`
	UserID              *string    `json:"userId,omitempty"`
	Method              *string    `json:"method,omitempty"`
	URL                 *string    `json:"url,omitempty"`
	IPAddress           *string    `json:"ipAddress,omitempty"`
	BackendResponseCode *string    `json:"backendResponseCode,omitempty"`
	ResponseCode        *int32     `json:"responseCode,omitempty"`
	ResponseSize        *int32     `json:"responseSize,omitempty"`
	Timestamp           *date.Time `json:"timestamp,omitempty"`
	Cache               *string    `json:"cache,omitempty"`
	APITime             *float64   `json:"apiTime,omitempty"`
	ServiceTime         *float64   `json:"serviceTime,omitempty"`
	APIRegion           *string    `json:"apiRegion,omitempty"`
	SubscriptionID      *string    `json:"subscriptionId,omitempty"`
	RequestID           *string    `json:"requestId,omitempty"`
	RequestSize         *int32     `json:"requestSize,omitempty"`
}

// Resource is the Resource definition.
type Resource struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// ResponseContract is operation response details.
type ResponseContract struct {
	StatusCode      *int32                    `json:"statusCode,omitempty"`
	Description     *string                   `json:"description,omitempty"`
	Representations *[]RepresentationContract `json:"representations,omitempty"`
	Headers         *[]ParameterContract      `json:"headers,omitempty"`
}

// SaveConfigurationParameter is parameters supplied to the Save Tenant Configuration operation.
type SaveConfigurationParameter struct {
	Branch *string `json:"branch,omitempty"`
	Force  *bool   `json:"force,omitempty"`
}

// SchemaCollection is the response of the list schema operation.
type SchemaCollection struct {
	autorest.Response `json:"-"`
	Value             *[]SchemaContract `json:"value,omitempty"`
	NextLink          *string           `json:"nextLink,omitempty"`
}

// SchemaCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client SchemaCollection) SchemaCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// SchemaContract is schema Contract details.
type SchemaContract struct {
	autorest.Response         `json:"-"`
	ID                        *string `json:"id,omitempty"`
	Name                      *string `json:"name,omitempty"`
	Type                      *string `json:"type,omitempty"`
	*SchemaContractProperties `json:"properties,omitempty"`
}

// SchemaContractProperties is schema contract Properties.
type SchemaContractProperties struct {
	ContentType               *string `json:"contentType,omitempty"`
	*SchemaDocumentProperties `json:"document,omitempty"`
}

// SchemaDocumentProperties is schema Document Properties.
type SchemaDocumentProperties struct {
	Value *string `json:"value,omitempty"`
}

// ServiceApplyNetworkConfigurationParameters is parameter supplied to the Apply Network configuration operation.
type ServiceApplyNetworkConfigurationParameters struct {
	Location *string `json:"location,omitempty"`
}

// ServiceBackupRestoreParameters is parameters supplied to the Backup/Restore of an API Management service operation.
type ServiceBackupRestoreParameters struct {
	StorageAccount *string `json:"storageAccount,omitempty"`
	AccessKey      *string `json:"accessKey,omitempty"`
	ContainerName  *string `json:"containerName,omitempty"`
	BackupName     *string `json:"backupName,omitempty"`
}

// ServiceBaseProperties is base Properties of an API Management service resource description.
type ServiceBaseProperties struct {
	NotificationSenderEmail     *string                      `json:"notificationSenderEmail,omitempty"`
	ProvisioningState           *string                      `json:"provisioningState,omitempty"`
	TargetProvisioningState     *string                      `json:"targetProvisioningState,omitempty"`
	CreatedAtUtc                *date.Time                   `json:"createdAtUtc,omitempty"`
	GatewayURL                  *string                      `json:"gatewayUrl,omitempty"`
	GatewayRegionalURL          *string                      `json:"gatewayRegionalUrl,omitempty"`
	PortalURL                   *string                      `json:"portalUrl,omitempty"`
	ManagementAPIURL            *string                      `json:"managementApiUrl,omitempty"`
	ScmURL                      *string                      `json:"scmUrl,omitempty"`
	HostnameConfigurations      *[]HostnameConfiguration     `json:"hostnameConfigurations,omitempty"`
	StaticIps                   *[]string                    `json:"staticIps,omitempty"`
	VirtualNetworkConfiguration *VirtualNetworkConfiguration `json:"virtualNetworkConfiguration,omitempty"`
	AdditionalLocations         *[]AdditionalLocation        `json:"additionalLocations,omitempty"`
	CustomProperties            *map[string]*string          `json:"customProperties,omitempty"`
	Certificates                *[]CertificateConfiguration  `json:"certificates,omitempty"`
	VirtualNetworkType          VirtualNetworkType           `json:"virtualNetworkType,omitempty"`
}

// ServiceCheckNameAvailabilityParameters is parameters supplied to the CheckNameAvailability operation.
type ServiceCheckNameAvailabilityParameters struct {
	Name *string `json:"name,omitempty"`
}

// ServiceGetSsoTokenResult is the response of the GetSsoToken operation.
type ServiceGetSsoTokenResult struct {
	autorest.Response `json:"-"`
	RedirectURI       *string `json:"redirectUri,omitempty"`
}

// ServiceListResult is the response of the List API Management services operation.
type ServiceListResult struct {
	autorest.Response `json:"-"`
	Value             *[]ServiceResource `json:"value,omitempty"`
	NextLink          *string            `json:"nextLink,omitempty"`
}

// ServiceListResultPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client ServiceListResult) ServiceListResultPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// ServiceNameAvailabilityResult is response of the CheckNameAvailability operation.
type ServiceNameAvailabilityResult struct {
	autorest.Response `json:"-"`
	NameAvailable     *bool                  `json:"nameAvailable,omitempty"`
	Message           *string                `json:"message,omitempty"`
	Reason            NameAvailabilityReason `json:"reason,omitempty"`
}

// ServiceProperties is properties of an API Management service resource description.
type ServiceProperties struct {
	NotificationSenderEmail     *string                      `json:"notificationSenderEmail,omitempty"`
	ProvisioningState           *string                      `json:"provisioningState,omitempty"`
	TargetProvisioningState     *string                      `json:"targetProvisioningState,omitempty"`
	CreatedAtUtc                *date.Time                   `json:"createdAtUtc,omitempty"`
	GatewayURL                  *string                      `json:"gatewayUrl,omitempty"`
	GatewayRegionalURL          *string                      `json:"gatewayRegionalUrl,omitempty"`
	PortalURL                   *string                      `json:"portalUrl,omitempty"`
	ManagementAPIURL            *string                      `json:"managementApiUrl,omitempty"`
	ScmURL                      *string                      `json:"scmUrl,omitempty"`
	HostnameConfigurations      *[]HostnameConfiguration     `json:"hostnameConfigurations,omitempty"`
	StaticIps                   *[]string                    `json:"staticIps,omitempty"`
	VirtualNetworkConfiguration *VirtualNetworkConfiguration `json:"virtualNetworkConfiguration,omitempty"`
	AdditionalLocations         *[]AdditionalLocation        `json:"additionalLocations,omitempty"`
	CustomProperties            *map[string]*string          `json:"customProperties,omitempty"`
	Certificates                *[]CertificateConfiguration  `json:"certificates,omitempty"`
	VirtualNetworkType          VirtualNetworkType           `json:"virtualNetworkType,omitempty"`
	PublisherEmail              *string                      `json:"publisherEmail,omitempty"`
	PublisherName               *string                      `json:"publisherName,omitempty"`
}

// ServiceResource is a single API Management service resource in List or Get response.
type ServiceResource struct {
	autorest.Response  `json:"-"`
	ID                 *string             `json:"id,omitempty"`
	Name               *string             `json:"name,omitempty"`
	Type               *string             `json:"type,omitempty"`
	Tags               *map[string]*string `json:"tags,omitempty"`
	*ServiceProperties `json:"properties,omitempty"`
	Sku                *ServiceSkuProperties `json:"sku,omitempty"`
	Location           *string               `json:"location,omitempty"`
	Etag               *string               `json:"etag,omitempty"`
}

// ServiceSkuProperties is API Management service resource SKU properties.
type ServiceSkuProperties struct {
	Name     SkuType `json:"name,omitempty"`
	Capacity *int32  `json:"capacity,omitempty"`
}

// ServiceUpdateHostnameParameters is parameters supplied to the UpdateHostname operation.
type ServiceUpdateHostnameParameters struct {
	Update *[]HostnameConfigurationOld `json:"update,omitempty"`
	Delete *[]HostnameType             `json:"delete,omitempty"`
}

// ServiceUpdateParameters is parameter supplied to Update Api Management Service.
type ServiceUpdateParameters struct {
	ID                       *string             `json:"id,omitempty"`
	Name                     *string             `json:"name,omitempty"`
	Type                     *string             `json:"type,omitempty"`
	Tags                     *map[string]*string `json:"tags,omitempty"`
	*ServiceUpdateProperties `json:"properties,omitempty"`
	Sku                      *ServiceSkuProperties `json:"sku,omitempty"`
	Etag                     *string               `json:"etag,omitempty"`
}

// ServiceUpdateProperties is properties of an API Management service resource description.
type ServiceUpdateProperties struct {
	NotificationSenderEmail     *string                      `json:"notificationSenderEmail,omitempty"`
	ProvisioningState           *string                      `json:"provisioningState,omitempty"`
	TargetProvisioningState     *string                      `json:"targetProvisioningState,omitempty"`
	CreatedAtUtc                *date.Time                   `json:"createdAtUtc,omitempty"`
	GatewayURL                  *string                      `json:"gatewayUrl,omitempty"`
	GatewayRegionalURL          *string                      `json:"gatewayRegionalUrl,omitempty"`
	PortalURL                   *string                      `json:"portalUrl,omitempty"`
	ManagementAPIURL            *string                      `json:"managementApiUrl,omitempty"`
	ScmURL                      *string                      `json:"scmUrl,omitempty"`
	HostnameConfigurations      *[]HostnameConfiguration     `json:"hostnameConfigurations,omitempty"`
	StaticIps                   *[]string                    `json:"staticIps,omitempty"`
	VirtualNetworkConfiguration *VirtualNetworkConfiguration `json:"virtualNetworkConfiguration,omitempty"`
	AdditionalLocations         *[]AdditionalLocation        `json:"additionalLocations,omitempty"`
	CustomProperties            *map[string]*string          `json:"customProperties,omitempty"`
	Certificates                *[]CertificateConfiguration  `json:"certificates,omitempty"`
	VirtualNetworkType          VirtualNetworkType           `json:"virtualNetworkType,omitempty"`
	PublisherEmail              *string                      `json:"publisherEmail,omitempty"`
	PublisherName               *string                      `json:"publisherName,omitempty"`
}

// ServiceUploadCertificateParameters is parameters supplied to the Upload SSL certificate for an API Management
// service operation.
type ServiceUploadCertificateParameters struct {
	Type                HostnameType `json:"type,omitempty"`
	Certificate         *string      `json:"certificate,omitempty"`
	CertificatePassword *string      `json:"certificate_password,omitempty"`
}

// SubscriptionCollection is paged Subscriptions list representation.
type SubscriptionCollection struct {
	autorest.Response `json:"-"`
	Value             *[]SubscriptionContract `json:"value,omitempty"`
	NextLink          *string                 `json:"nextLink,omitempty"`
}

// SubscriptionCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client SubscriptionCollection) SubscriptionCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// SubscriptionContract is subscription details.
type SubscriptionContract struct {
	autorest.Response               `json:"-"`
	ID                              *string `json:"id,omitempty"`
	Name                            *string `json:"name,omitempty"`
	Type                            *string `json:"type,omitempty"`
	*SubscriptionContractProperties `json:"properties,omitempty"`
}

// SubscriptionContractProperties is subscription details.
type SubscriptionContractProperties struct {
	UserID           *string           `json:"userId,omitempty"`
	ProductID        *string           `json:"productId,omitempty"`
	DisplayName      *string           `json:"displayName,omitempty"`
	State            SubscriptionState `json:"state,omitempty"`
	CreatedDate      *date.Time        `json:"createdDate,omitempty"`
	StartDate        *date.Time        `json:"startDate,omitempty"`
	ExpirationDate   *date.Time        `json:"expirationDate,omitempty"`
	EndDate          *date.Time        `json:"endDate,omitempty"`
	NotificationDate *date.Time        `json:"notificationDate,omitempty"`
	PrimaryKey       *string           `json:"primaryKey,omitempty"`
	SecondaryKey     *string           `json:"secondaryKey,omitempty"`
	StateComment     *string           `json:"stateComment,omitempty"`
}

// SubscriptionCreateParameterProperties is parameters supplied to the Create subscription operation.
type SubscriptionCreateParameterProperties struct {
	UserID       *string           `json:"userId,omitempty"`
	ProductID    *string           `json:"productId,omitempty"`
	DisplayName  *string           `json:"displayName,omitempty"`
	PrimaryKey   *string           `json:"primaryKey,omitempty"`
	SecondaryKey *string           `json:"secondaryKey,omitempty"`
	State        SubscriptionState `json:"state,omitempty"`
}

// SubscriptionCreateParameters is subscription create details.
type SubscriptionCreateParameters struct {
	*SubscriptionCreateParameterProperties `json:"properties,omitempty"`
}

// SubscriptionKeyParameterNamesContract is subscription key parameter names details.
type SubscriptionKeyParameterNamesContract struct {
	Header *string `json:"header,omitempty"`
	Query  *string `json:"query,omitempty"`
}

// SubscriptionsDelegationSettingsProperties is subscriptions delegation settings properties.
type SubscriptionsDelegationSettingsProperties struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// SubscriptionUpdateParameterProperties is parameters supplied to the Update subscription operation.
type SubscriptionUpdateParameterProperties struct {
	UserID         *string           `json:"userId,omitempty"`
	ProductID      *string           `json:"productId,omitempty"`
	ExpirationDate *date.Time        `json:"expirationDate,omitempty"`
	DisplayName    *string           `json:"displayName,omitempty"`
	PrimaryKey     *string           `json:"primaryKey,omitempty"`
	SecondaryKey   *string           `json:"secondaryKey,omitempty"`
	State          SubscriptionState `json:"state,omitempty"`
	StateComment   *string           `json:"stateComment,omitempty"`
}

// SubscriptionUpdateParameters is subscription update details.
type SubscriptionUpdateParameters struct {
	*SubscriptionUpdateParameterProperties `json:"properties,omitempty"`
}

// TenantConfigurationSyncStateContract is tenant Configuration Synchronization State.
type TenantConfigurationSyncStateContract struct {
	autorest.Response       `json:"-"`
	Branch                  *string    `json:"branch,omitempty"`
	CommitID                *string    `json:"commitId,omitempty"`
	IsExport                *bool      `json:"isExport,omitempty"`
	IsSynced                *bool      `json:"isSynced,omitempty"`
	IsGitEnabled            *bool      `json:"isGitEnabled,omitempty"`
	SyncDate                *date.Time `json:"syncDate,omitempty"`
	ConfigurationChangeDate *date.Time `json:"configurationChangeDate,omitempty"`
}

// TermsOfServiceProperties is terms of service contract properties.
type TermsOfServiceProperties struct {
	Text            *string `json:"text,omitempty"`
	Enabled         *bool   `json:"enabled,omitempty"`
	ConsentRequired *bool   `json:"consentRequired,omitempty"`
}

// TokenBodyParameterContract is oAuth acquire token request body parameter (www-url-form-encoded).
type TokenBodyParameterContract struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

// UserCollection is paged Users list representation.
type UserCollection struct {
	autorest.Response `json:"-"`
	Value             *[]UserContract `json:"value,omitempty"`
	NextLink          *string         `json:"nextLink,omitempty"`
}

// UserCollectionPreparer prepares a request to retrieve the next set of results. It returns
// nil if no more results exist.
func (client UserCollection) UserCollectionPreparer() (*http.Request, error) {
	if client.NextLink == nil || len(to.String(client.NextLink)) <= 0 {
		return nil, nil
	}
	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(to.String(client.NextLink)))
}

// UserContract is user details.
type UserContract struct {
	autorest.Response       `json:"-"`
	ID                      *string `json:"id,omitempty"`
	Name                    *string `json:"name,omitempty"`
	Type                    *string `json:"type,omitempty"`
	*UserContractProperties `json:"properties,omitempty"`
}

// UserContractProperties is user profile.
type UserContractProperties struct {
	State            UserState               `json:"state,omitempty"`
	Note             *string                 `json:"note,omitempty"`
	Identities       *[]UserIdentityContract `json:"identities,omitempty"`
	FirstName        *string                 `json:"firstName,omitempty"`
	LastName         *string                 `json:"lastName,omitempty"`
	Email            *string                 `json:"email,omitempty"`
	RegistrationDate *date.Time              `json:"registrationDate,omitempty"`
	Groups           *[]GroupContract        `json:"groups,omitempty"`
}

// UserCreateParameterProperties is parameters supplied to the Create User operation.
type UserCreateParameterProperties struct {
	State      UserState               `json:"state,omitempty"`
	Note       *string                 `json:"note,omitempty"`
	Identities *[]UserIdentityContract `json:"identities,omitempty"`
	Email      *string                 `json:"email,omitempty"`
	FirstName  *string                 `json:"firstName,omitempty"`
	LastName   *string                 `json:"lastName,omitempty"`
	Password   *string                 `json:"password,omitempty"`
}

// UserCreateParameters is user create details.
type UserCreateParameters struct {
	*UserCreateParameterProperties `json:"properties,omitempty"`
}

// UserEntityBaseParameters is user Entity Base Parameters set.
type UserEntityBaseParameters struct {
	State      UserState               `json:"state,omitempty"`
	Note       *string                 `json:"note,omitempty"`
	Identities *[]UserIdentityContract `json:"identities,omitempty"`
}

// UserIdentityCollection is list of Users Identity list representation.
type UserIdentityCollection struct {
	autorest.Response `json:"-"`
	Value             *[]UserIdentityContract `json:"value,omitempty"`
	Count             *int64                  `json:"count,omitempty"`
	NextLink          *string                 `json:"nextLink,omitempty"`
}

// UserIdentityContract is user identity details.
type UserIdentityContract struct {
	Provider *string `json:"provider,omitempty"`
	ID       *string `json:"id,omitempty"`
}

// UserTokenParameters is parameters supplied to the Get User Token operation.
type UserTokenParameters struct {
	KeyType KeyType    `json:"keyType,omitempty"`
	Expiry  *date.Time `json:"expiry,omitempty"`
}

// UserTokenResult is get User Token response details.
type UserTokenResult struct {
	autorest.Response `json:"-"`
	Value             *string `json:"value,omitempty"`
}

// UserUpdateParameters is user update parameters.
type UserUpdateParameters struct {
	*UserUpdateParametersProperties `json:"properties,omitempty"`
}

// UserUpdateParametersProperties is parameters supplied to the Update User operation.
type UserUpdateParametersProperties struct {
	State      UserState               `json:"state,omitempty"`
	Note       *string                 `json:"note,omitempty"`
	Identities *[]UserIdentityContract `json:"identities,omitempty"`
	Email      *string                 `json:"email,omitempty"`
	Password   *string                 `json:"password,omitempty"`
	FirstName  *string                 `json:"firstName,omitempty"`
	LastName   *string                 `json:"lastName,omitempty"`
}

// VirtualNetworkConfiguration is configuration of a virtual network to which API Management service is deployed.
type VirtualNetworkConfiguration struct {
	Vnetid           *string `json:"vnetid,omitempty"`
	Subnetname       *string `json:"subnetname,omitempty"`
	SubnetResourceID *string `json:"subnetResourceId,omitempty"`
}

// X509CertificateName is properties of server X509Names.
type X509CertificateName struct {
	Name                        *string `json:"name,omitempty"`
	IssuerCertificateThumbprint *string `json:"issuerCertificateThumbprint,omitempty"`
}
